name: build-with-old-compilers

on: [push]

env:
  DEFAULT_SANITIZE_ADDRESS: OFF
  DEFAULT_SANITIZE_THREAD: OFF
  DEFAULT_SANITIZE_UB: OFF

jobs:
  build:
    runs-on: ${{matrix.os}}

    env:
      BUILD_TYPE: ${{matrix.BUILD_TYPE}}
      SANITIZE_ADDRESS: ${{matrix.SANITIZE_ADDRESS}}
      SANITIZE_THREAD: ${{matrix.SANITIZE_THREAD}}
      SANITIZE_UB: ${{matrix.SANITIZE_UB}}

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: clang 11 Release
            os: ubuntu-20.04
            BUILD_TYPE: Release

          - name: clang 11 Release with ASan
            os: ubuntu-20.04
            BUILD_TYPE: Release
            SANITIZE_ADDRESS: ON

          - name: clang 11 Release with TSan
            os: ubuntu-20.04
            BUILD_TYPE: Release
            SANITIZE_THREAD: ON

          - name: clang 11 Release with UBSan
            os: ubuntu-20.04
            BUILD_TYPE: Release
            SANITIZE_UB: ON

          - name: clang 11 Debug
            os: ubuntu-20.04
            BUILD_TYPE: Debug

          - name: clang 11 Debug with ASan
            os: ubuntu-20.04
            BUILD_TYPE: Debug
            SANITIZE_ADDRESS: ON

          - name: clang 11 Debug with TSan
            os: ubuntu-20.04
            BUILD_TYPE: Debug
            SANITIZE_THREAD: ON

          - name: clang 11 Debug with UBSan
            os: ubuntu-20.04
            BUILD_TYPE: Debug
            SANITIZE_UB: ON

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup dependencies for Linux
        run: |
          SANITIZE_ADDRESS="${SANITIZE_ADDRESS:-$DEFAULT_SANITIZE_ADDRESS}"
          SANITIZE_THREAD="${SANITIZE_THREAD:-$DEFAULT_SANITIZE_THREAD}"
          SANITIZE_UB="${SANITIZE_UB:-$DEFAULT_SANITIZE_UB}"
          curl 'https://apt.llvm.org/llvm-snapshot.gpg.key' \
            | sudo apt-key add -
          echo 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main' \
            | sudo tee -a /etc/apt/sources.list
          sudo add-apt-repository -y 'ppa:mhier/libboost-latest'
          sudo apt-get update
          sudo apt-get install -y boost1.74 libc6-dev-i386 clang-11 \
            clang-tidy-11
          if [[ $SANITIZE_ADDRESS != "ON" && $SANITIZE_THREAD != "ON" \
              && $SANITIZE_UB != "ON" ]]; then
            sudo apt-get install -y valgrind
          fi
          if [[ $BUILD_TYPE == "Release" ]]; then
            sudo apt-get install -y llvm-11-dev lld-11
          fi
        if: runner.os == 'Linux'

      - name: Create build environment
        run: mkdir ${{github.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment
        # variable access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: |
          SANITIZE_ADDRESS="${SANITIZE_ADDRESS:-$DEFAULT_SANITIZE_ADDRESS}"
          SANITIZE_THREAD="${SANITIZE_THREAD:-$DEFAULT_SANITIZE_THREAD}"
          SANITIZE_UB="${SANITIZE_UB:-$DEFAULT_SANITIZE_UB}"
          export PATH=$HOME/.local/bin:$PATH
          export CC=clang-11
          export CXX=clang++-11
          EXTRA_CMAKE_ARGS+="-DCLANG_TIDY_EXE=/usr/bin/clang-tidy-11 "
          if [[ $BUILD_TYPE == "Release" ]]; then
            EXTRA_CMAKE_ARGS+="-DLLVMAR_EXECUTABLE=/usr/bin/llvm-ar-11 \
              -DLLVMNM_EXECUTABLE=/usr/bin/llvm-nm-11 \
              -DLLVMRANLIB_EXECUTABLE=/usr/bin/llvm-ranlib-11"
          fi
          cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DSANITIZE_ADDRESS=${SANITIZE_ADDRESS} \
          -DSANITIZE_THREAD=${SANITIZE_THREAD} -DSANITIZE_UB=${SANITIZE_UB} \
          ${EXTRA_CMAKE_ARGS}

      - name: Build
        working-directory: ${{github.workspace}}/build
        run: make -j3

      - name: Correctness test
        working-directory: ${{github.workspace}}/build
        run: ctest -j3 -V

      - name: Benchmark correctness test
        working-directory: ${{github.workspace}}/build
        run: make quick_benchmarks

      - name: Valgrind test
        working-directory: ${{github.workspace}}/build
        run: make valgrind
        if: >
          env.SANITIZE_ADDRESS != 'ON' && env.SANITIZE_THREAD != 'ON'
          && env.SANITIZE_UB != 'ON'
