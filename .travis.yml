language: generic

dist: bionic

# Setup anchors to be used by the jobs as needed. The Travis CI linter gives
# '[warn] on root: unknown key "os_setups"', could not find a way
# to fix it.
os_setups:
  gcc9_setup: &gcc9
    os: linux
    compiler: gcc
    addons:
      apt:
        sources:
          - sourceline: 'ppa:ubuntu-toolchain-r/test'
        packages:
          - g++-9
          - libasan5-dbg
          - valgrind
  clang10_setup: &clang10
    os: linux
    compiler: clang
    addons:
      apt:
        sources:
          - sourceline: 'ppa:mhier/libboost-latest'
          - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main'
            key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
        packages:
          - boost1.70
          - clang-10
          - clang-tidy-10
          - clang-tools-10
          - llvm-10-dev
          - lld
          - valgrind
  macos_setup: &macos
    os: osx
    osx_image: xcode11.3
    compiler: clang
    addons:
      homebrew:
        packages:
          - cmake
          - cppcheck
        update: true
  coverage_setup: &coverage
    os: osx
    osx_image: xcode11.3
    compiler: gcc
    addons:
      homebrew:
        packages:
          - cmake
          - gcc
          - cpanm
        update: true

env:
  global:
    - SANITIZE=OFF
    - SANITIZE_THREAD=OFF
    - SCAN_BUILD=
    - COVERAGE=OFF

matrix:
  include:
    - name: "Bionic GCC 9 Release"
      <<: *gcc9
      env:
        - MATRIX_EVAL="CC=gcc-9 && CXX=g++-9" BUILD_TYPE=Release
    - name: "Bionic GCC 9 Release with ASan/UBSan"
      <<: *gcc9
      env:
        - MATRIX_EVAL="CC=gcc-9 && CXX=g++-9" BUILD_TYPE=Release SANITIZE=ON
    - name: "Bionic GCC 9 Release with TSan/UBSan"
      <<: *gcc9
      env:
        - MATRIX_EVAL="CC=gcc-9 && CXX=g++-9" BUILD_TYPE=Release SANITIZE_THREAD=ON
    - name: "Bionic GCC 9 Debug"
      <<: *gcc9
      env:
        - MATRIX_EVAL="CC=gcc-9 && CXX=g++-9" BUILD_TYPE=Debug
    - name: "Bionic GCC 9 Debug with ASan/UBSan"
      <<: *gcc9
      env:
        - MATRIX_EVAL="CC=gcc-9 && CXX=g++-9" BUILD_TYPE=Debug SANITIZE=ON
    - name: "Bionic GCC 9 Debug with TSan/UBSan"
      <<: *gcc9
      env:
        - MATRIX_EVAL="CC=gcc-9 && CXX=g++-9" BUILD_TYPE=Debug SANITIZE_THREAD=ON
    - name: "Bionic clang 10 Release"
      <<: *clang10
      env:
        - MATRIX_EVAL="CC=clang-10 && CXX=clang++-10" BUILD_TYPE=Release
    - name: "Bionic clang 10 Release with ASan/UBSan"
      <<: *clang10
      env:
        - MATRIX_EVAL="CC=clang-10 && CXX=clang++-10" BUILD_TYPE=Release SANITIZE=ON
    - name: "Bionic clang 10 Release with TSan/UBSan"
      <<: *clang10
      env:
        - MATRIX_EVAL="CC=clang-10 && CXX=clang++-10" BUILD_TYPE=Release SANITIZE_THREAD=ON
    - name: "Bionic clang 10 Debug"
      <<: *clang10
      env:
        - MATRIX_EVAL="CC=clang-10 && CXX=clang++-10" BUILD_TYPE=Debug
    - name: "Bionic clang 10 Debug with ASan/UBSan"
      <<: *clang10
      env:
        - MATRIX_EVAL="CC=clang-10 && CXX=clang++-10" BUILD_TYPE=Debug SANITIZE=ON
    - name: "Bionic clang 10 Debug with TSan/UBSan"
      <<: *clang10
      env:
        - MATRIX_EVAL="CC=clang-10 && CXX=clang++-10" BUILD_TYPE=Debug SANITIZE_THREAD=ON
    - name: "Bionic clang 10 static analysis Release"
      <<: *clang10
      env:
        - MATRIX_EVAL="CC=clang-10 && CXX=clang++-10" BUILD_TYPE=Release SCAN_BUILD=scan-build-10
    - name: "Bionic clang 10 static analysis Debug"
      <<: *clang10
      env:
        - MATRIX_EVAL="CC=clang-10 && CXX=clang++-10" BUILD_TYPE=Debug SCAN_BUILD=scan-build-9
    - name: "macOS XCode 11.3 Release"
      <<: *macos
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++" BUILD_TYPE=Release
    - name: "macOS XCode 11.3 Release with ASan/UBSan"
      <<: *macos
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++" BUILD_TYPE=Release SANITIZE=ON
    - name: "macOS XCode 11.3 Release with TSan/UBSan"
      <<: *macos
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++" BUILD_TYPE=Release SANITIZE_THREAD=ON
    - name: "macOS XCode 11.3 Debug"
      <<: *macos
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++" BUILD_TYPE=Debug
    - name: "macOS XCode 11.3 Debug with ASan/UBSan"
      <<: *macos
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++" BUILD_TYPE=Debug SANITIZE=ON
    - name: "macOS XCode 11.3 Debug with TSan/UBSan"
      <<: *macos
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++" BUILD_TYPE=Debug SANITIZE_THREAD=ON
    - name: "macOS Debug coverage"
      <<: *coverage
      env:
        - MATRIX_EVAL="CC=gcc-9 && CXX=g++-9" BUILD_TYPE=Debug COVERAGE=ON
    - name: "macOS Release coverage"
      <<: *coverage
      env:
        - MATRIX_EVAL="CC=gcc-9 && CXX=g++-9" BUILD_TYPE=Release COVERAGE=ON

before_install:
  - eval "${MATRIX_EVAL}"

install:
  - sudo easy_install pip
  - pip install --user $USER cpplint

script:
  - mkdir build
  - cd build
  - EXTRA_CMAKE_OPTIONS=""
  - sudo rm -rf /usr/local/clang-7.0.0
  - if [[ "$CC" == "clang-10" ]]; then
      sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-10 50;
      sudo update-alternatives --install /usr/bin/ld ld /usr/bin/lld 50;
    fi
  - if [[ "$CC" == "gcc-9" && "$COVERAGE" == "ON" ]]; then
      set -e;
      sudo cpanm install JSON;
      brew install lcov;
      EXTRA_CMAKE_OPTIONS+="-DGCOV_PATH=/usr/local/bin/gcov-9 ";
    fi
  - if [[ "$SANITIZE" == "OFF" && "$SANITIZE_THREAD" == "OFF" && "$COVERAGE" == "OFF" && "$TRAVIS_OS_NAME" != "osx" ]]; then
      RUN_VALGRIND=1;
    else
      RUN_VALGRIND=0;
    fi
  - if [[ "$RUN_VALGRIND" == 1 ]]; then
      EXTRA_CMAKE_OPTIONS+=" -DCMAKE_C_COMPILER_FLAGS+=-march=x86_64";
      EXTRA_CMAKE_OPTIONS+=" -DCMAKE_CXX_COMPILER_FLAGS+=-march=x86_64";
    fi
  - cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_C_COMPILER=${CC} -DCMAKE_CXX_COMPILER=${CXX} -DSANITIZE=${SANITIZE} -DSANITIZE_THREAD=${SANITIZE_THREAD} -DCOVERAGE=${COVERAGE} ${EXTRA_CMAKE_OPTIONS}
  - if [[ ! -z "${SCAN_BUILD}" ]]; then
      ${SCAN_BUILD} --status-bugs -stats -analyze-headers --force-analyze-debug-code make -j3;
      travis_terminate 0;
    else
      make -j3;
    fi
  - if [[ "$COVERAGE" == "OFF" ]]; then
      ctest -j3 -V;
      echo "Benchmark runs (for benchmark correctness, not performance!)";
      make quick_benchmarks;
    else
      set -e;
      make -j3 coverage;
      bash <(curl -s https://codecov.io/bash) -f coverage-coverage.info || echo "Codecov did not collect coverage reports";
    fi
  - if [[ "$RUN_VALGRIND" == 1 ]]; then
      make valgrind;
    fi
