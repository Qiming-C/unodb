language: generic

dist: focal

# Setup anchors to be used by the jobs as needed. The Travis CI linter gives
# '[warn] on root: unknown key "os_setups"', could not find a way
# to fix it.
os_setups:
  gcc10_setup: &gcc10
    os: linux
    compiler: gcc
    addons:
      apt:
        sources:
          - sourceline: 'ppa:mhier/libboost-latest'
        packages:
          - python3-pip
          - boost1.73
          - g++-10
          - libc6-dev-i386
          - valgrind
  clang11_setup: &clang11
    os: linux
    compiler: clang
    addons:
      apt:
        sources:
          - sourceline: 'ppa:mhier/libboost-latest'
          - sourceline: 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main'
            key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
        packages:
          - python3-pip
          - boost1.74
          - clang-11
          - clang-tidy-11
          - clang-tools-11
          - llvm-11-dev
          - lld-11
          - libc6-dev-i386
          - valgrind
  macos_setup: &macos
    os: osx
    osx_image: xcode12.2
    compiler: clang
    addons:
      homebrew:
        packages:
          - cmake
        update: true

env:
  global:
    - SANITIZE_ADDRESS=OFF
    - SANITIZE_THREAD=OFF
    - SANITIZE_UB=OFF
    - SCAN_BUILD=
    - STATIC_ANALYSIS=OFF
    - COVERAGE=OFF

matrix:
  include:
    - name: "GCC 10 Release"
      <<: *gcc10
      env:
        - MATRIX_EVAL="CC=gcc-10 && CXX=g++-10" BUILD_TYPE=Release
    - name: "GCC 10 Release with ASan"
      <<: *gcc10
      env:
        - MATRIX_EVAL="CC=gcc-10 && CXX=g++-10" BUILD_TYPE=Release SANITIZE_ADDRESS=ON
    - name: "GCC 10 Release with TSan"
      <<: *gcc10
      env:
        - MATRIX_EVAL="CC=gcc-10 && CXX=g++-10" BUILD_TYPE=Release SANITIZE_THREAD=ON
    - name: "GCC 10 Release with UBSan"
      <<: *gcc10
      env:
        - MATRIX_EVAL="CC=gcc-10 && CXX=g++-10" BUILD_TYPE=Release SANITIZE_UB=ON
    - name: "GCC 10 Debug"
      <<: *gcc10
      env:
        - MATRIX_EVAL="CC=gcc-10 && CXX=g++-10" BUILD_TYPE=Debug
    - name: "GCC 10 Debug with ASan"
      <<: *gcc10
      env:
        - MATRIX_EVAL="CC=gcc-10 && CXX=g++-10" BUILD_TYPE=Debug SANITIZE_ADDRESS=ON
    - name: "GCC 10 Debug with TSan"
      <<: *gcc10
      env:
        - MATRIX_EVAL="CC=gcc-10 && CXX=g++-10" BUILD_TYPE=Debug SANITIZE_THREAD=ON
    - name: "GCC 10 Debug with UBSan"
      <<: *gcc10
      env:
        - MATRIX_EVAL="CC=gcc-10 && CXX=g++-10" BUILD_TYPE=Debug SANITIZE_UB=ON
    - name: "GCC 10 static analysis Release"
      <<: *gcc10
      env:
        - MATRIX_EVAL="CC=gcc-10 && CXX=g++-10" BUILD_TYPE=Release STATIC_ANALYSIS=ON
    - name: "GCC 10 static analysis Debug"
      <<: *gcc10
      env:
        - MATRIX_EVAL="CC=gcc-10 && CXX=g++-10" BUILD_TYPE=Debug STATIC_ANALYSIS=ON
    - name: "clang 11 Release"
      <<: *clang11
      env:
        - MATRIX_EVAL="CC=clang-11 && CXX=clang++-11" BUILD_TYPE=Release
    - name: "clang 11 Release with ASan"
      <<: *clang11
      env:
        - MATRIX_EVAL="CC=clang-11 && CXX=clang++-11" BUILD_TYPE=Release SANITIZE_ADDRESS=ON
    - name: "clang 11 Release with TSan"
      <<: *clang11
      env:
        - MATRIX_EVAL="CC=clang-11 && CXX=clang++-11" BUILD_TYPE=Release SANITIZE_THREAD=ON
    - name: "clang 11 Release with UBSan"
      <<: *clang11
      env:
        - MATRIX_EVAL="CC=clang-11 && CXX=clang++-11" BUILD_TYPE=Release SANITIZE_UB=ON
    - name: "clang 11 Debug"
      <<: *clang11
      env:
        - MATRIX_EVAL="CC=clang-11 && CXX=clang++-11" BUILD_TYPE=Debug
    - name: "clang 11 Debug with ASan"
      <<: *clang11
      env:
        - MATRIX_EVAL="CC=clang-11 && CXX=clang++-11" BUILD_TYPE=Debug SANITIZE_ADDRESS=ON
    - name: "clang 11 Debug with TSan"
      <<: *clang11
      env:
        - MATRIX_EVAL="CC=clang-11 && CXX=clang++-11" BUILD_TYPE=Debug SANITIZE_THREAD=ON
    - name: "clang 11 Debug with UBSan"
      <<: *clang11
      env:
        - MATRIX_EVAL="CC=clang-11 && CXX=clang++-11" BUILD_TYPE=Debug SANITIZE_UB=ON
    - name: "clang 11 static analysis Release"
      <<: *clang11
      env:
        - MATRIX_EVAL="CC=clang-11 && CXX=clang++-11" BUILD_TYPE=Release SCAN_BUILD=scan-build-11
    - name: "XCode 12.2 Release"
      <<: *macos
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++" BUILD_TYPE=Release
    - name: "XCode 12.2 Release with ASan"
      <<: *macos
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++" BUILD_TYPE=Release SANITIZE_ADDRESS=ON
    - name: "XCode 12.2 Release with TSan"
      <<: *macos
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++" BUILD_TYPE=Release SANITIZE_THREAD=ON
    - name: "XCode 12.2 Release with UBSan"
      <<: *macos
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++" BUILD_TYPE=Release SANITIZE_UB=ON
    - name: "XCode 12.2 Debug"
      <<: *macos
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++" BUILD_TYPE=Debug
    - name: "XCode 12.2 Debug with ASan"
      <<: *macos
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++" BUILD_TYPE=Debug SANITIZE_ADDRESS=ON
    - name: "XCode 12.2 Debug with TSan"
      <<: *macos
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++" BUILD_TYPE=Debug SANITIZE_THREAD=ON
    - name: "XCode 12.2 Debug with UBSan"
      <<: *macos
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++" BUILD_TYPE=Debug SANITIZE_UB=ON
    - name: "XCode 12.2 Release include-what-you-use & aggressive cppcheck"
      <<: *macos
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++" BUILD_TYPE=Release IWYU=ON CPPCHECK_AGGRESSIVE=ON
    - name: "XCode 12.2 Debug include-what-you-use & aggressive cppcheck"
      <<: *macos
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++" BUILD_TYPE=Debug IWYU=ON CPPCHECK_AGGRESSIVE=ON
  allow_failures:
    - env: MATRIX_EVAL="CC=clang && CXX=clang++" BUILD_TYPE=Release IWYU=ON CPPCHECK_AGGRESSIVE=ON
    - env: MATRIX_EVAL="CC=clang && CXX=clang++" BUILD_TYPE=Debug IWYU=ON CPPCHECK_AGGRESSIVE=ON

before_install:
  - eval "${MATRIX_EVAL}"

install:
  - pip3 install --user $USER cpplint

script:
  - mkdir build
  - cd build
  - sudo rm -rf /usr/local/clang-7.0.0
  - if [[ "$CC" == "clang-11" ]]; then
      sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-11 50;
      sudo update-alternatives --install /usr/bin/ld ld /usr/bin/lld-11 50;
    fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      if [[ "$SANITIZE_ADDRESS" == "OFF" && "$SANITIZE_THREAD" == "OFF" && "$SANITIZE_UB" == "OFF" ]]; then
        brew install cppcheck;
      fi;
      if [[ "$IWYU" == "ON" ]]; then
        brew install iwyu;
      fi;
    fi
  - cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_C_COMPILER=${CC} -DCMAKE_CXX_COMPILER=${CXX} -DSANITIZE_ADDRESS=${SANITIZE_ADDRESS} -DSANITIZE_THREAD=${SANITIZE_THREAD} -DSANITIZE_UB=${SANITIZE_UB} -DSTATIC_ANALYSIS=${STATIC_ANALYSIS} -DIWYU=${IWYU} -DCPPCHECK_AGGRESSIVE=${CPPCHECK_AGGRESSIVE}
  - if [[ ! -z "${SCAN_BUILD}" ]]; then
      ${SCAN_BUILD} --status-bugs -stats -analyze-headers --force-analyze-debug-code make -j3;
      travis_terminate 0;
    fi
  - if [[ "$STATIC_ANALYSIS" == "ON" || "$IWYU" == "ON" || "$CPPCHECK_AGGRESSIVE" == "ON" ]]; then
      travis_wait make;
      travis_terminate 0;
    fi
  - make -j3
  - ctest -j3 -V
  - echo "Benchmark runs (for benchmark correctness, not performance!)"
  - make quick_benchmarks
  - echo "Fuzzing with DeepState for 1 minute"
  - make -j2 deepstate_1m
  - if [[ "$SANITIZE_ADDRESS" == "OFF" && "$SANITIZE_THREAD" == "OFF" && "$SANITIZE_UB" == "OFF" && "$COVERAGE" == "OFF" && "$TRAVIS_OS_NAME" != "osx" ]]; then
      make valgrind;
    fi
