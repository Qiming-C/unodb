language: cpp

dist: bionic

env:
  global:
    - SANITIZE=OFF
    - SANITIZE_THREAD=OFF
    - SCAN_BUILD=
    - COVERAGE=OFF

matrix:
  include:
    - &linux-base
      name: "Bionic GCC 8 Release"
      os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-bionic-8
            # TODO(laurynas): add llvm-toolchain-bionic-9 once available
            - sourceline: 'ppa:mhier/libboost-latest'
          packages:
            # TODO(laurynas): install only what's needed for each job
            - g++-7
            - g++-8
            - boost1.70
            - valgrind
            - clang-8
            - clang-tools-8
            - cppcheck
            - lcov
      env:
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8" BUILD_TYPE=Release
      compiler: gcc
    - <<: *linux-base
      name: "Bionic GCC 8 Release with ASan/UBSan"
      env:
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8" BUILD_TYPE=Release SANITIZE=ON
    - <<: *linux-base
      name: "Bionic GCC 8 Release with TSan/UBSan"
      env:
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8" BUILD_TYPE=Release SANITIZE_THREAD=ON
    - <<: *linux-base
      name: "Bionic GCC 8 Debug"
      env:
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8" BUILD_TYPE=Debug
    - <<: *linux-base
      name: "Bionic GCC 8 Debug with ASan/UBSan"
      env:
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8" BUILD_TYPE=Debug SANITIZE=ON
    - <<: *linux-base
      name: "Bionic GCC 8 Debug with TSan/UBSan"
      env:
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8" BUILD_TYPE=Debug SANITIZE_THREAD=ON
    - <<: *linux-base
      name: "Bionic clang 8 Release"
      compiler: clang
      env:
        - MATRIX_EVAL="CC=clang-8 && CXX=clang++-8" BUILD_TYPE=Release
    - <<: *linux-base
      name: "Bionic clang 8 Release with ASan/UBSan"
      compiler: clang
      env:
        - MATRIX_EVAL="CC=clang-8 && CXX=clang++-8" BUILD_TYPE=Release SANITIZE=ON
    - <<: *linux-base
      name: "Bionic clang 8 Release with TSan/UBSan"
      compiler: clang
      env:
        - MATRIX_EVAL="CC=clang-8 && CXX=clang++-8" BUILD_TYPE=Release SANITIZE_THREAD=ON
    - <<: *linux-base
      name: "Bionic clang 8 Debug"
      compiler: clang
      env:
        - MATRIX_EVAL="CC=clang-8 && CXX=clang++-8" BUILD_TYPE=Debug
    - <<: *linux-base
      name: "Bionic clang 8 Debug with ASan/UBSan"
      compiler: clang
      env:
        - MATRIX_EVAL="CC=clang-8 && CXX=clang++-8" BUILD_TYPE=Debug SANITIZE=ON
    - <<: *linux-base
      name: "Bionic clang 8 Debug with TSan/UBSan"
      compiler: clang
      env:
        - MATRIX_EVAL="CC=clang-8 && CXX=clang++-8" BUILD_TYPE=Debug SANITIZE_THREAD=ON
    - <<: *linux-base
      name: "Bionic clang 8 static analysis Release"
      compiler: clang
      env:
        - MATRIX_EVAL="CC=clang-8 && CXX=clang++-8" BUILD_TYPE=Release SCAN_BUILD=scan-build-8
    - <<: *linux-base
      name: "Bionic clang 8 static analysis Debug"
      compiler: clang
      env:
        - MATRIX_EVAL="CC=clang-8 && CXX=clang++-8" BUILD_TYPE=Debug SCAN_BUILD=scan-build-8
    - &macos-base
      name: "macOS XCode 11.0 Release"
      os: osx
      osx_image: xcode11
      addons:
        homebrew:
          packages:
            - cmake
      compiler: clang
      env:
        - BUILD_TYPE=Release
    - <<: *macos-base
      name: "macOS XCode 11.0 Release with ASan/UBSan"
      env:
        - BUILD_TYPE=Release SANITIZE=ON
    - <<: *macos-base
      name: "macOS XCode 11.0 Release with TSan/UBSan"
      env:
        - BUILD_TYPE=Release SANITIZE_THREAD=ON
    - <<: *macos-base
      name: "macOS XCode 11.0 Debug"
      env:
        - BUILD_TYPE=Debug
    - <<: *macos-base
      name: "macOS XCode 11.0 Debug with ASan/UBSan"
      env:
        - BUILD_TYPE=Debug SANITIZE=ON
    - <<: *macos-base
      name: "macOS XCode 11.0 Debug with TSan/UBSan"
      env:
        - BUILD_TYPE=Debug SANITIZE_THREAD=ON
    - <<: *linux-base
      name: "Bionic GCC 7 Release"
      compiler: gcc
      env:
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7" BUILD_TYPE=Release
    - <<: *linux-base
      name: "Bionic GCC 7 Debug"
      compiler: gcc
      env:
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7" BUILD_TYPE=Debug
    - <<: *linux-base
      name: "Bionic Debug coverage"
      compiler: gcc
      env:
        # Current lcov version does not understand coverage data
        # produced by GCC 8 nor clang
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7" BUILD_TYPE=Debug COVERAGE=ON
    - <<: *linux-base
      name: "Bionic Release coverage"
      compiler: gcc
      env:
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7" BUILD_TYPE=Release COVERAGE=ON

before_install:
  - eval "${MATRIX_EVAL}"

install:
  - pip install --user $USER cpplint

script:
  - mkdir build
  - cd build
  - EXTRA_CMAKE_OPTIONS=""
  - if [[ "$CC" == "gcc-7" && "$COVERAGE" == "ON" ]]; then
      EXTRA_CMAKE_OPTIONS+="-DGCOV_PATH=/usr/bin/gcov-7 ";
    fi
  - cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_C_COMPILER=${CC} -DCMAKE_CXX_COMPILER=${CXX} -DSANITIZE=${SANITIZE} -DSANITIZE_THREAD=${SANITIZE_THREAD} -DCOVERAGE=${COVERAGE} ${EXTRA_CMAKE_OPTIONS}
  - if [[ ! -z "${SCAN_BUILD}" ]]; then
      ${SCAN_BUILD} --status-bugs -stats -analyze-headers --force-analyze-debug-code make -j3;
      travis_terminate 0;
    else
      make -j3;
    fi
  - if [[ "$COVERAGE" == "OFF" ]]; then
      ctest -j3 -V;
    else
      make -j3 coverage;
      bash <(curl -s https://codecov.io/bash) -f coverage-coverage.info || echo "Codecov did not collect coverage reports";
    fi
  - if [[ "$SANITIZE" == "OFF" && "$SANITIZE_THREAD" == "OFF" && "$COVERAGE" == "OFF" && "$TRAVIS_OS_NAME" != "osx" ]]; then
      valgrind --error-exitcode=1 ./test_art;
      valgrind --error-exitcode=1 ./test_art_mutex_concurrency;
    fi
